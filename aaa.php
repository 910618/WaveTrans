<?php

$json = '[[17,17,19,2,28,28,22,18,15,15,22,26,0,27,27,31,31,23,10,10],[8,19,14,14,2,22,7,20,20,22,26,20,20,0,0,7,8,8,23,2],[10,0,0,3,0,7,18,22,18,20,15,22,2,1,10,-1,2,7,1,9],[-1,10,12,11,1,2,1,5,22,-1,-1,1,1,-1,2,-1,4,4,3,-1]]';

$json_value = '[[0.684700,0.637400,0.586300,0.739500,0.637400,0.586300,0.760300,0.637400,0.586300,0.649500,0.728900,0.637400,0.661400,0.684700,0.625000,0.599500,0.572800,0.649500,0.696000,0.728900],[0.125000,0.637400,0.544900,0.515400,0.612400,0.450700,0.433000,0.515400,0.515400,0.649500,0.612400,0.599500,0.599500,0.673100,0.484100,0.279500,0.530300,0.530300,0.414600,0.125000],[0.125000,0.353600,0.353600,0.306200,0.306200,0.414600,0.353600,0.467700,0.353600,0.353600,0.414600,0.395300,0.395300,0.176800,0.176800,-1.000000,0.433000,0.176800,0.176800,0.125000],[-1.000000,0.250000,0.353600,0.279500,0.250000,0.306200,0.279500,0.125000,0.216500,-1.000000,-1.000000,0.279500,0.375000,-1.000000,0.125000,-1.000000,0.433000,0.125000,0.176800,-1.000000]]';

$aa = json_decode($json, 1); //4*20的数组
$vv = json_decode($json_value, 1);
$a = array(); //20*4的数组
$v = array(); //20*4的数组

//转成20*4的数组
for ($i=0; $i<20; $i++) {

	foreach ($aa as $key => $value) {
		
		$a[$i][] = $value[$i];
	}
	
	foreach ($vv as $key1 => $value1) {
		
		$v[$i][] = $value1[$i];
	}	
}


//用来装结果的数组
$r = array(17, 19);

//遍历
for ($i=1; $i<20; $i++) {

	//$tmp_1:  		当前优先
	//$tmp_2:  		下一位优先	
	//$tmp_0:  		当前单个		
	
	unset($tmp_0);
	unset($tmp_1);
	unset($tmp_2);
	
	for ($j = 0; $j < 3; $j++) {
		
		if ($a[$i][$j] != -1 && $i < 19 && ($key = array_search($a[$i][$j], $a[$i + 1])) !== false) {
			
			
			//if ($j > $key) {
			if ($v[$i][$j] < $v[$i][$key]) {
				
				//echo "(升)";
				//array_push($tmp, $a[$i][$j] . "(下一位优先)");
				
				if (!isset($tmp_2)) {
					
					$tmp_2 = $a[$i][$j];
				}
			
			//} else if ($j < $key) {
			} else if ($v[$i][$j] > $v[$i][$key]) {
				
				//echo "(降)";
				//array_unshift($tmp, $a[$i][$j] . "(当前优先)");
				
				if (!isset($tmp_1)) {
					
					$tmp_1 = $a[$i][$j];
				}
			
			//} else if ($j == $key) {
			} else if ($v[$i][$j] == $v[$i][$key]) {
				
				if (!isset($tmp_2)) {
									
					$tmp_2 = $a[$i][$j];
				}
				
				//echo "(平)";
				//array_unshift($tmp, $a[$i][$j] . "(看情况)");
				
				/*
				if (isset($tmp_1)) {
				
					$tmp_2 = $a[$i][$j];	
				
				} else {
					
					$tmp_1 = $a[$i][$j];
				}*/

				
				/*
				if ($v[$i][$j] <= $v[$i][$key]) {
					
					if (!isset($tmp_1))
						$tmp_1 = $a[$i][$j];
					
				} else {
					
					if (!isset($tmp_2))
						$tmp_2 = $a[$i][$j];
				}
				*/
				
			}
		
		} else if ($a[$i][$j] != -1) {
			
			//echo "(降)";
			//array_unshift($tmp, $a[$i][$j] . "(当前优先)");
			
			if (!isset($tmp_0) && !isset($tmp_1) && $j < 2) {
				
				$tmp_0 = $a[$i][$j];
			}
		}
	}
	
	
	if (isset($tmp_1) && !isset($r[$i])) {
		
		$r[$i] = $tmp_1;
	}
	
	if (isset($tmp_0) && !isset($r[$i])) {
		
		$r[$i] = $tmp_0;
	}

	/*
	if (isset($tmp_2) && !isset($r[$i])) {
		
		$r[$i] = $tmp_2;
		unset($tmp_2);
	}
	*/	
		
	if (isset($tmp_2) && !isset($r[$i+1])) {
		
		$r[$i+1] = $tmp_2;
	}
	
	if (!isset($r[$i])) {
		
		$r[$i] = -1;
	}	

	/*
	if (isset($tmp[0]) && !isset($r[$i])) {
		
		$r[$i] = $tmp[0];
	}
	
	if (isset($tmp[1]) && !isset($r[$i+1])) {
			
		$r[$i+1] = $tmp[1];
	}
	
	if (!isset($r[$i])) {
			
		$r[$i] = 0;
	}
	
	echo $i . ":\n";
	print_r($tmp);
	*/
	
	
}


ksort($r);

echo implode(", ", $r);

/*

[17,17,25,17,29,29,29, 5, 5,31,29, 5, 0,27,13,28,12,29,29,16],
[-1,-1,19,25,17,30,30,29,15,15,31,29, 5, 0,28,15,-1,12,16,29],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]



正确的:
25, 17, 29, 30, 29, 5, 15, 31, 29, 5, 0, 27, 13, 28, 15, 12, 29, 16,
算出来的：
25, 17, 29, 30, 30, 5, 15, 15, 15, 15, 15, 15, 28, 28, 28, 29, 16, 16




*/







